{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","stateJames","searchRobots","requestRobots","dispatchJames","event","payload","target","value","dispatch","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd62df0d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email ,id}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bm2 shadow-5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}></img>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\tconsole.log('CardList')\r\n\t// if (true) {\r\n\t// \tthrow new Error('NOOOOOO!');\r\n\t// }\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{robots.map(robot => (\r\n\t\t\t\t<Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\r\n\t\t\t))}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\tconsole.log('SearchBox');\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\ttype='search' \r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lighest-blue\"\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'; \r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '455px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Ooooops. That is not good</h1>\r\n\t\t}\r\n\t\t//the if condition occurs only in production\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\r\n\r\n//PureComponent is like a lightweight smart component for simple components\r\n//use PureComponent will only re render when its props change and has a built in \r\n//shouldComponentUpdate that only triggers when its props changee\r\n\r\n//it only uses shallow comparisons when trying to detect changes in the prop so when\r\n//changes are made in the props in a very deep nested level the changes wont be detected\r\n\r\n//Having your own shouldComponentUpdate lifecycle method in your component will replace\r\n//the need for having a PureComponent (though adding performance penalty because you are adding\r\n//a function) with a default shouldComponentUpdate setting\r\nclass CounterButton extends PureComponent {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n\t//dont overuse this and measure if it actually increases performance\r\n\t//because it may cause bug and miss updates that it should re-render to\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState( state => {\r\n\t\t\treturn {count: state.count + 1}\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('CounterButton')\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\t//this makes it so that when the parent component that is using this component re-renders, \r\n\t//the part of the parent component that is using this component does not have to re-render\r\n\t// increasing browser performance\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t\t//never update this component which is dangerous\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<CounterButton color={'red'}></CounterButton>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = stateJames => {\r\n\treturn {\r\n\t\t// searchfield: stateJames.searchfield\r\n\t\t// searchfield: state.searchRobots.searchfield\r\n\t\t// 'searchRobots' rudcer identifier would be necessary if there were combined reducers in the store\r\n\r\n\t\tsearchfield: stateJames.searchRobots.searchfield,\r\n\t\t// combinedreducers is now used with multple reducers\r\n\r\n\t\trobots: stateJames.requestRobots.robots,\r\n\t\tisPending: stateJames.requestRobots.isPending,\r\n\t\terror: stateJames.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatchJames => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatchJames(setSearchField(event.target.value)),\r\n\t\t// setSearchField returns an type/paylaod object to dispatchJames not triggering redux thunk and going straight to reducers\r\n\r\n\t\tonRequestRobots: () => dispatchJames(requestRobots())\r\n\r\n\t\t/*\r\n\t\tonRequestRobots: () => requestRobots(dispatchJames)\r\n\t\t//dispatch is taken from the function paramter in mapDispatchToProps and sent right into\r\n\t\t//the function parameter for multiple actions to be processed inside requestRobots()\r\n\t\t*/\r\n\t}\r\n}\r\n\r\nclass App extends React.Component {\r\n\t// constructor() {\r\n\t// \tsuper();\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\tsearchfield: ''\r\n\t// \t}\r\n\t// \tconsole.log('constructor');\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// .then(response => response.json())\r\n\t\t// .then(users => this.setState({robots: users}));\r\n\t\t// console.log('componentDidMount');\r\n\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t/*\r\n\tonSearchChange = events => {\r\n\t\tthis.setState({\r\n\t\t\tsearchfield: events.target.value\r\n\t\t}\r\n\t\t// , () => {\r\n\t\t// \tconst filteredRobots = robots.filter(robots => {\r\n\t\t// \t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t// \t});\r\n\t\t// \tthis.setState({\r\n\t\t// \t\trobots: filteredRobots\r\n\t\t// \t})\r\n\t\t// }\r\n\t\t)\r\n\t}\r\n\t*/\r\n\r\n\trender() {\r\n\t\t// const {robots} = this.state;\r\n\t\tconst { searchfield, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robots => {\r\n\t\t\tconsole.log(robots)\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t});\r\n\t\tconsole.log('render');\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t{ isPending ? <h1>Loading</h1> :\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}></CardList>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n//connect() is a higher order function which returns another function\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n//redux store gets a 'mapStateToProps' function which takes in state as the function parameter input\r\n\t//for redux to run behind the scenes... it would have to do mapStateToProps(stateObject)\r\n//redux store gets a 'mapDispatchToProps' function which takes in the dispatch object as the function paramter input\r\n\t//for redux to run behind the scenes... it would have to do mapDispatchToProps(dispatchObject)","import * as actionTypes from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: actionTypes.CHANGE_SEARCHFIELD,\r\n\tpayload: text\r\n})\r\n\r\n//function is returned instead of an object for Redux Thunk to register\r\n//Redux thunk makes the returned function input parameter be the dispatch\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: actionTypes.REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(data => dispatch({type:actionTypes.REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({type: actionTypes.REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase actionTypes.CHANGE_SEARCHFIELD:\r\n\t\t\treturn Object.assign({}, state, {searchfield: action.payload});\r\n\t\t\t// return {\r\n\t\t\t// \t...state,\r\n\t\t\t// \tsearchfield: action.payload\r\n\t\t\t// }\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase actionTypes.REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase actionTypes.REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase actionTypes.REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n//checks if a function is returned instead of an object\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons';\n//if there is no export default in './robots'... you need to use destructuring\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App/>\n\t</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}